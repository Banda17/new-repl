In my existing React app for a railway management dashboard, update the navigation structure to reflect the following changes. The app likely has a navigation component (e.g., in src/App.js or src/components/Navbar.js) with the current structure: DASHBOARD, GOODS (with sub-menu: Detention Form, Upload Data, Historical, Railway Reports, Daily Reports, ALL ENTRIES, Excel Upload), and OPERATIONS (with sub-menu: Upload Data, Excel Upload, Railway Reports, Detention Form). Modify the navigation as follows:

1. Remove the DASHBOARD tab completely.
2. Rename the OPERATIONS tab to BULK DATA UPLOAD.
3. Update the BULK DATA UPLOAD sub-menu:
   - Keep Upload Data and Excel Upload.
   - Remove Railway Reports and Detention Form.
4. Update the GOODS sub-menu:
   - Remove ALL ENTRIES from the root sub-menu.
   - Create a new sub-menu under GOODS called Interchange, and move Historical under it as Interchange->Historical.
   - Create a new sub-menu under GOODS called Loading.
   - Move ALL ENTRIES under Loading as Loading->All Entries.
   - Add two new options under Loading: Punctuality and Planning.
   - Keep the remaining items (Detention Form, Upload Data, Daily Reports, Excel Upload) in the GOODS root sub-menu.
5. Ensure the final navigation structure is:
   - GOODS
     - Detention Form
     - Upload Data
     - Interchange
       - Historical
     - Loading
       - All Entries
       - Punctuality
       - Planning
     - Daily Reports
     - Excel Upload
   - BULK DATA UPLOAD
     - Upload Data
     - Excel Upload
6. Do not modify the functionality of existing pages (e.g., Loading Form Page or All Entries table); only update the navigation links and structure.
7. If routing is used (e.g., React Router), update the routes to reflect the new structure (e.g., /goods/loading/all-entries for All Entries).
8. Maintain the existing styling of the navigation (e.g., dark blue background, white text, dropdown menu behavior).
9. Add comments in the code to explain the updated navigation structure.

The app runs in Replit’s Node.js environment with a React template. Use modern JavaScript, avoid adding new dependencies unless necessary (e.g., React Router if not already used), and ensure the output is previewable in Replit’s web view.